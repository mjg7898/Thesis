#get counts for second cutoff
#get counts for third cutoff
#get counts for fourth cutoff
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
summarise(total_included_data[total_included_data$total_amount_per<535.49,], mean=mean(total_amount_per, na.rm=TRUE))
#get counts for second cutoff
#get counts for third cutoff
#get counts for fourth cutoff
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
summarise(total_included_data, mean=mean(total_amount_per, na.rm=TRUE))
#get counts for second cutoff
#get counts for third cutoff
#get counts for fourth cutoff
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
summarise(total_included_data, n=n(total_amount_per, na.rm=TRUE))
#get counts for second cutoff
#get counts for third cutoff
#get counts for fourth cutoff
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n(total_amount_per))
#get counts for second cutoff
#get counts for third cutoff
#get counts for fourth cutoff
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
#get counts for second cutoff
#get counts for third cutoff
#get counts for fourth cutoff
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff,third_cutoff,fourth_cutoff)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff,third_cutoff,fourth_cutoff,by=state)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff,third_cutoff,fourth_cutoff,by="state")
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff,third_cutoff,fourth_cutoff,by=1)
View(third_cutoff)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff,third_cutoff,fourth_cutoff)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff)
chatper_4_table<-merge(chatper_4_table,third_cutoff)
chatper_4_table<-merge(chatper_4_table,fourth_cutoff)
View(chatper_4_table)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chatper_4_table<-merge(first_cutoff,second_cutoff)
chatper_4_table<-merge(chatper_4_table,third_cutoff)
chatper_4_table<-merge(chatper_4_table,fourth_cutoff)
write.xlsx(chapter_4_table,"chapter_4_table.xlsx")
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chapter_4_table<-merge(first_cutoff,second_cutoff)
chapter_4_table<-merge(chatper_4_table,third_cutoff)
chapter_4_table<-merge(chatper_4_table,fourth_cutoff)
write.xlsx(chapter_4_table,"chapter_4_table.xlsx")
View(chapter_4_table)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff_raw"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chapter_4_table<-merge(first_cutoff,second_cutoff)
chapter_4_table<-merge(chatper_4_table,third_cutoff)
chapter_4_table<-merge(chatper_4_table,fourth_cutoff)
#get percentage numbers
chapter_4_table$total<-summarise(total_included_data,n=n())[2]
write.xlsx(chapter_4_table,"chapter_4_table.xlsx")
names(third_cutoff)[3]<-"third_cutoff_percent"
summarise(total_included_data,n=n())[2]
fourth_cutoff
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff_raw"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chapter_4_table<-merge(first_cutoff,second_cutoff)
chapter_4_table<-merge(chatper_4_table,third_cutoff)
chapter_4_table<-merge(chatper_4_table,fourth_cutoff)
#get percentage numbers
chapter_4_table<-merge(chapter_4_table, summarise(total_included_data,n=n()))
write.xlsx(chapter_4_table,"chapter_4_table.xlsx")
View(chapter_4_table)
# create the data set with just totals
total_included_data<-state_program_grants[!is.na(state_program_grants$total_amount_per),]
#get counts for first cutoff
first_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<535.49,], n=n())
names(first_cutoff)[2]<-"first_cutoff"
#get counts for second cutoff
second_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<2136.27,], n=n())
names(second_cutoff)[2]<-"second_cutoff"
#get counts for third cutoff
third_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<315.86,], n=n())
names(third_cutoff)[2]<-"third_cutoff_raw"
#get counts for fourth cutoff
fourth_cutoff<-summarise(total_included_data[total_included_data$total_amount_per<1260.08,], n=n())
names(fourth_cutoff)[2]<-"fourth_cutoff"
#generate table
chapter_4_table<-merge(first_cutoff,second_cutoff)
chapter_4_table<-merge(chatper_4_table,third_cutoff)
chapter_4_table<-merge(chatper_4_table,fourth_cutoff)
#get percentage numbers
chapter_4_table<-merge(chapter_4_table, summarise(total_included_data,n=n()))
chapter_4_table$first_cutoff_per<-chapter_4_table$first_cutoff/chapter_4_table$n
chapter_4_table$second_cutoff_per<-chapter_4_table$second_cutoff/chapter_4_table$n
chapter_4_table$third_cutoff_per<-chapter_4_table$third_cutoff/chapter_4_table$n
chapter_4_table$fourth_cutoff_per<-chapter_4_table$fourth_cutoff/chapter_4_table$n
write.xlsx(chapter_4_table,"chapter_4_table.xlsx")
View(chapter_4_table)
View(wisconsin_grants)
View(state_FCC_comparison)
View(state_FCC_comparison)
#create a data frame that compares actual results for each state to estimates and number of grants above estimates
state_program_grants<-group_by(state_program_grants,state)
states_to_calc<-group_keys(state_program_grants)
states_column<-c()
actual_mean_column<-c()
model_estimates_column<-c()
auction_estimate_column<-c()
total_observations_column<-c()
above_model_column<-c()
above_auction_column<-c()
above_model_percent_column<-c()
above_auction_percent_column<-c()
t_statistic_column<-c()
p_value_column<-c()
for(state_index in 1:nrow(states_to_calc)){
state_to_calc<-pull(states_to_calc[state_index,])
print(state_to_calc)
actual_mean<-mean(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],na.rm=TRUE)
model_estimate <- FCC_grant_estimates$model_estimates[FCC_grant_estimates$state==state_to_calc]
auction_estimate <- FCC_grant_estimates$auction_estimates[FCC_grant_estimates$state==state_to_calc]
if(NROW(model_estimate)==1&NROW(auction_estimate)==1){
states_column<-append(states_column,state_to_calc)
actual_mean_column<-append(actual_mean_column,actual_mean)
model_estimates_column<-append(model_estimates_column,model_estimate)
auction_estimate_column<-append(auction_estimate_column,auction_estimate)
total_observations <- nrow(state_program_grants[state_program_grants$state==state_to_calc,])
total_observations_column<-append(total_observations_column,total_observations)
state_data_frame<-state_program_grants[state_program_grants$state==state_to_calc,]
above_model<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>model_estiamte]))
above_model_column<-append(above_model_column,above_model)
above_auction<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>auction_estimate]))
above_auction_column<-append(above_auction_column,above_auction)
above_model_percent<-above_model/total_observations
above_model_percent_column<-append(above_model_percent_column,above_model_percent)
above_auction_percent<-above_auction/total_observations
above_auction_percent_column<-append(above_auction_percent_column,above_auction_percent)
ttest<-t.test(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],FCC_auction_results$GrantPerEstimate[FCC_auction_results$State==state_to_calc],alternative='g')
print(ttest$statistic)
print(ttest$p.value)
t_statistic_column<-append(t_statistic_column,ttest$statistic)
p_value_column<-append(p_value_column,ttest$p.value)
}
}
state_FCC_comparison<-data.frame(states_column,actual_mean_column,model_estimates_column,auction_estimate_column,total_observations_column,above_model_column,above_auction_column,above_model_percent_column,above_auction_percent_column,t_statistic_column,p_value_column)
write.xlsx(state_FCC_comparison,"state_FCC_comparison.xlsx")
#create a data frame that compares actual results for each state to estimates and number of grants above estimates
state_program_grants<-group_by(state_program_grants,state)
states_to_calc<-group_keys(state_program_grants)
states_column<-c()
actual_mean_column<-c()
model_estimates_column<-c()
auction_estimate_column<-c()
total_observations_column<-c()
above_model_column<-c()
above_auction_column<-c()
above_model_percent_column<-c()
above_auction_percent_column<-c()
t_statistic_column<-c()
p_value_column<-c()
for(state_index in 1:nrow(states_to_calc)){
state_to_calc<-pull(states_to_calc[state_index,])
print(state_to_calc)
actual_mean<-mean(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],na.rm=TRUE)
model_estimate <- FCC_grant_estimates$model_estimates[FCC_grant_estimates$state==state_to_calc]
auction_estimate <- FCC_grant_estimates$auction_estimates[FCC_grant_estimates$state==state_to_calc]
if(NROW(model_estimate)==1&NROW(auction_estimate)==1){
states_column<-append(states_column,state_to_calc)
actual_mean_column<-append(actual_mean_column,actual_mean)
model_estimates_column<-append(model_estimates_column,model_estimate)
auction_estimate_column<-append(auction_estimate_column,auction_estimate)
total_observations <- nrow(state_program_grants[state_program_grants$state==state_to_calc,])
total_observations_column<-append(total_observations_column,total_observations)
state_data_frame<-state_program_grants[state_program_grants$state==state_to_calc,]
above_model<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>model_estiamte]))
above_model_column<-append(above_model_column,above_model)
above_auction<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>auction_estimate]))
above_auction_column<-append(above_auction_column,above_auction)
above_model_percent<-above_model/total_observations
above_model_percent_column<-append(above_model_percent_column,above_model_percent)
above_auction_percent<-above_auction/total_observations
above_auction_percent_column<-append(above_auction_percent_column,above_auction_percent)
ttest<-t.test(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],FCC_auction_results$GrantPerEstimate[FCC_auction_results$State==state_to_calc],alternative='g')
print(ttest$statistic)
print(ttest$p.value)
t_statistic_column<-append(t_statistic_column,ttest$statistic)
p_value_column<-append(p_value_column,ttest$p.value)
}
}
state_FCC_comparison<-data.frame(states_column,actual_mean_column,model_estimates_column,auction_estimate_column,total_observations_column,above_model_column,above_auction_column,above_model_percent_column,above_auction_percent_column,t_statistic_column,p_value_column)
write.xlsx(state_FCC_comparison,"state_FCC_comparison.xlsx")
library(xlsx)
#create a data frame that compares actual results for each state to estimates and number of grants above estimates
state_program_grants<-group_by(state_program_grants,state)
states_to_calc<-group_keys(state_program_grants)
states_column<-c()
actual_mean_column<-c()
model_estimates_column<-c()
auction_estimate_column<-c()
total_observations_column<-c()
above_model_column<-c()
above_auction_column<-c()
above_model_percent_column<-c()
above_auction_percent_column<-c()
t_statistic_column<-c()
p_value_column<-c()
for(state_index in 1:nrow(states_to_calc)){
state_to_calc<-pull(states_to_calc[state_index,])
print(state_to_calc)
actual_mean<-mean(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],na.rm=TRUE)
model_estimate <- FCC_grant_estimates$model_estimates[FCC_grant_estimates$state==state_to_calc]
auction_estimate <- FCC_grant_estimates$auction_estimates[FCC_grant_estimates$state==state_to_calc]
if(NROW(model_estimate)==1&NROW(auction_estimate)==1){
states_column<-append(states_column,state_to_calc)
actual_mean_column<-append(actual_mean_column,actual_mean)
model_estimates_column<-append(model_estimates_column,model_estimate)
auction_estimate_column<-append(auction_estimate_column,auction_estimate)
total_observations <- nrow(state_program_grants[state_program_grants$state==state_to_calc,])
total_observations_column<-append(total_observations_column,total_observations)
state_data_frame<-state_program_grants[state_program_grants$state==state_to_calc,]
above_model<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>model_estiamte]))
above_model_column<-append(above_model_column,above_model)
above_auction<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>auction_estimate]))
above_auction_column<-append(above_auction_column,above_auction)
above_model_percent<-above_model/total_observations
above_model_percent_column<-append(above_model_percent_column,above_model_percent)
above_auction_percent<-above_auction/total_observations
above_auction_percent_column<-append(above_auction_percent_column,above_auction_percent)
ttest<-t.test(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],FCC_auction_results$GrantPerEstimate[FCC_auction_results$State==state_to_calc],alternative='g')
print(ttest$statistic)
print(ttest$p.value)
t_statistic_column<-append(t_statistic_column,ttest$statistic)
p_value_column<-append(p_value_column,ttest$p.value)
}
}
state_FCC_comparison<-data.frame(states_column,actual_mean_column,model_estimates_column,auction_estimate_column,total_observations_column,above_model_column,above_auction_column,above_model_percent_column,above_auction_percent_column,t_statistic_column,p_value_column)
write.xlsx(state_FCC_comparison,"state_FCC_comparison.xlsx")
library(readxl)
library(dplyr)
library(xlsx)
#create a data frame that compares actual results for each state to estimates and number of grants above estimates
state_program_grants<-group_by(state_program_grants,state)
states_to_calc<-group_keys(state_program_grants)
states_column<-c()
actual_mean_column<-c()
model_estimates_column<-c()
auction_estimate_column<-c()
total_observations_column<-c()
above_model_column<-c()
above_auction_column<-c()
above_model_percent_column<-c()
above_auction_percent_column<-c()
t_statistic_column<-c()
p_value_column<-c()
for(state_index in 1:nrow(states_to_calc)){
state_to_calc<-pull(states_to_calc[state_index,])
print(state_to_calc)
actual_mean<-mean(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],na.rm=TRUE)
model_estimate <- FCC_grant_estimates$model_estimates[FCC_grant_estimates$state==state_to_calc]
auction_estimate <- FCC_grant_estimates$auction_estimates[FCC_grant_estimates$state==state_to_calc]
if(NROW(model_estimate)==1&NROW(auction_estimate)==1){
states_column<-append(states_column,state_to_calc)
actual_mean_column<-append(actual_mean_column,actual_mean)
model_estimates_column<-append(model_estimates_column,model_estimate)
auction_estimate_column<-append(auction_estimate_column,auction_estimate)
total_observations <- nrow(state_program_grants[state_program_grants$state==state_to_calc,])
total_observations_column<-append(total_observations_column,total_observations)
state_data_frame<-state_program_grants[state_program_grants$state==state_to_calc,]
above_model<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>model_estiamte]))
above_model_column<-append(above_model_column,above_model)
above_auction<- NROW(na.omit(state_data_frame$grant_amount_per[state_data_frame$grant_amount_per>auction_estimate]))
above_auction_column<-append(above_auction_column,above_auction)
above_model_percent<-above_model/total_observations
above_model_percent_column<-append(above_model_percent_column,above_model_percent)
above_auction_percent<-above_auction/total_observations
above_auction_percent_column<-append(above_auction_percent_column,above_auction_percent)
ttest<-t.test(state_program_grants$grant_amount_per[state_program_grants$state==state_to_calc],FCC_auction_results$GrantPerEstimate[FCC_auction_results$State==state_to_calc],alternative='g')
print(ttest$statistic)
print(ttest$p.value)
t_statistic_column<-append(t_statistic_column,ttest$statistic)
p_value_column<-append(p_value_column,ttest$p.value)
}
}
state_FCC_comparison<-data.frame(states_column,actual_mean_column,model_estimates_column,auction_estimate_column,total_observations_column,above_model_column,above_auction_column,above_model_percent_column,above_auction_percent_column,t_statistic_column,p_value_column)
write.xlsx(state_FCC_comparison,"state_FCC_comparison.xlsx")
View(washington_grants)
View(state_data_frame)
View(state_program_grants_backup)
View(FCC_auction_results)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
ggqqplot(state_program_grants$grant_amount[,state_program_grants$state='ME']
ggqqplot(state_program_grants$grant_amount[,state_program_grants$state=='ME']
)
ggqqplot(state_program_grants$grant_amount[state_program_grants$state=='ME',])
state_program_grants$grant_amount[state_program_grants$state=='ME',]
state_program_grants$grant_amount[state_program_grants$state=='ME']
ggqqplot(state_program_grants$grant_amount[state_program_grants$state=='ME'])
ggqqplot(state_program_grants$grant_amount[state_program_grants$state=='ID'])
ggqqplot(state_program_grants$grant_amount[state_program_grants$state=='MN'])
ggqqplot(state_program_grants$grant_amount[state_program_grants$state=='MA'])
ggqqplot(state_program_grants$grant_amount_per[state_program_grants$state=='MA'])
ggqqplot(state_program_grants$grant_amount_per[state_program_grants$state=='MN'])
ggqqplot(state_program_grants$grant_amount_per[state_program_grants$state=='ID'])
ggqqplot(state_program_grants$grant_amount_per[state_program_grants$state=='ME'])
View(california_grants)
View(colorado_grants)
View(idaho_grants)
View(virginia_grants)
View(state_program_grants)
View(idaho_grants_clean)
View(idaho_grants)
View(chapter_4_table)
View(state_program_grants_backup)
View(virginia_grants)
state_program_grants$match_percent<-state_program_grants$match_amount/state_program_grants$total_amount
state_program_grants[state_program_grants$state=='VA',]
state_program_grants[,state_program_grants$state=='VA']
View(virginia_grants)
mean(state_program_grants$match_percent[state_program_grants$state=='VA'])
write.xlsx(state_program_grants,"state_program_grants.xlsx")
library(xlsx)
write.xlsx(state_program_grants,"state_program_grants.xlsx")
